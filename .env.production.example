# ChoreQuest Production Environment Configuration
# Copy this file to .env.production and fill in your actual values

# ============================================================================
# Supabase Configuration (REQUIRED)
# ============================================================================
# Get these from your Supabase instance:
#
# Option A - Local Supabase (Development):
#   Run: npx supabase status
#   API URL: http://localhost:54321
#   anon key: Copy from "anon key" output (JWT token starting with eyJ...)
#   service_role key: Copy from "service_role key" output
#
# Option B - Hosted Supabase (supabase.com):
#   1. Go to your project dashboard
#   2. Settings → API
#   3. Copy Project URL, anon/public key, and service_role key
#
# Option C - Self-Hosted Supabase (Docker):
#   1. Start Supabase: cd supabase-docker && docker compose up -d
#   2. Get keys from .env: cat supabase-docker/.env | grep -E "ANON_KEY=|SERVICE_ROLE_KEY="
#   3. Copy the JWT tokens (starting with eyJ...)
#   4. Use container name for URL: http://supabase-kong:8000
#
# ⚠️ IMPORTANT: Use "anon key" not "publishable key"
#    Correct keys are JWT tokens (3 parts, start with eyJ...)
#
# ⚠️ Docker Networking:
#    - NEXT_PUBLIC_SUPABASE_URL: Used by browser (client-side)
#    - SUPABASE_INTERNAL_URL: Used by server-side migrations (optional)
#
#    For the bundled Docker stack, point clients at your host IP and keep the internal URL on the Docker network.
#    For hosted Supabase, set both URLs to the hosted project URL and remove SUPABASE_INTERNAL_URL.

NEXT_PUBLIC_SUPABASE_URL=http://YOUR-HOSTNAME-OR-IP:8000
SUPABASE_INTERNAL_URL=http://supabase-kong:8000  # Leave as-is when running the Supabase Docker stack locally
SUPABASE_URL=http://YOUR-HOSTNAME-OR-IP:8000  # Optional server/test fallback; omit when using hosted Supabase
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key-here
SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key-here

# Database password (Option C only - get from supabase-docker/.env POSTGRES_PASSWORD)
DB_PASSWORD=your-super-secret-and-long-postgres-password

# ============================================================================
# Application Configuration
# ============================================================================
NODE_ENV=production
PORT=3000
NEXTAUTH_URL=http://YOUR-HOSTNAME-OR-IP:3000  # Must match the URL users and mobile devices visit
CRON_SECRET=generate-a-long-random-string-here
